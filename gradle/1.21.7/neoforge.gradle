apply plugin: "com.github.johnrengelman.shadow"

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":Common").loom.accessWidenerPath

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs("-Xms1G", "-Xmx4G", "-Dmixin.debug.export=true", "-Dmixin.debug.countInjections=true")
            vmArgs("-Dlog4j2.configurationFile=https://raw.githubusercontent.com/Fuzss/modresources/main/gradle/${libs.versions.minecraft.get()}/log4j.xml")
            vmArgs("-Dpuzzleslib.isDevelopmentEnvironment=true", "-D${modId}.isDevelopmentEnvironment=true")
        }
        client {
            client()
            setConfigName("NeoForge Client ${libs.versions.minecraft.get()}")
            programArgs("--username", "Player####")
        }
        server {
            server()
            setConfigName("NeoForge Server ${libs.versions.minecraft.get()}")
        }
        data {
            clientData()
            setConfigName("NeoForge Data ${libs.versions.minecraft.get()}")
            programArgs("--all", "--mod", modId)
            programArgs("--existing", project(":Common").file("src/main/resources").absolutePath)
            programArgs("--output", project(":Common").file("src/generated/resources").absolutePath)
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases/"
    }
    maven {
        name = "TheIllusiveC4"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "OctoStudios"
        url = "https://maven.octo-studios.com/releases/"
    }
}

dependencies {
    // Common Project
    common(project(path: ":Common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":Common", configuration: "transformProductionNeoForge")) { transitive = false }

    // NeoForge
    neoForge libs.neoforge.neoforge

    if (libs.hasProperty("bettermodsbutton") && libs.bettermodsbutton.hasProperty("neoforge")) {
        modLocalRuntime(libs.bettermodsbutton.neoforge) { transitive = false }
    }
    if (libs.hasProperty("forgeconfigscreens") && libs.forgeconfigscreens.hasProperty("neoforge")) {
        modLocalRuntime(libs.forgeconfigscreens.neoforge) { transitive = false }
    }
}

def clazz = this.class.classLoader.loadClass("net.fabricmc.loom.task.AbstractRunTask")
tasks.withType(clazz).configureEach {
    doFirst {
        // Step 1: Generate a filtered classpath file
        def originalClasspath = file(".gradle/loom-cache/forge_minecraft_classpath.txt")
        // We don't need this since we are using Mojmap
        def filtered = originalClasspath.readLines().findAll { !it.contains("unprotect") }

        def customClasspathFile = file("$buildDir/forge_minecraft_classpath.txt")
        customClasspathFile.text = filtered.join(System.lineSeparator())

        // Step 2: Patch launch.cfg
        def launchCfgFile = file(".gradle/loom-cache/launch.cfg")
        def lines = launchCfgFile.readLines().collect { line ->
            if (line.contains("legacyClassPath.file=")) {
                return line.replaceFirst(/(?<=legacyClassPath\.file=).*/, customClasspathFile.absolutePath.replace('\\', '/'))
            }
            return line
        }
        launchCfgFile.text = lines.join(System.lineSeparator())
        println "Patched launch.cfg to use custom classpath file"
    }
}

tasks.withType(Jar).configureEach {
    exclude "architectury.common.json"
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = ""
    atAccessWideners.add("${modId}.accesswidener")
}

sourcesJar {
    def commonSources = project(":Common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

[tasks.modrinth, tasks.curseforge].each { it.finalizedBy project.tasks.refreshUpdateJson }
