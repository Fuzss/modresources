var allSubprojects = rootProject.subprojects.name
var modLoaderSubprojects = allSubprojects.findAll { !it.toLowerCase().contains("common") }

allSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "Clean", GradleBuild) {
        group = "_build"
        tasks = [":" + projectName + ":clean"]
    }
}

tasks.register("allClean", GradleBuild) {
    group = "_build"
    tasks = allSubprojects.collect { ":" + it + ":clean" }
}

allSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "Build", GradleBuild) {
        group = "_build"
        tasks = [":Common:clean", ":" + projectName + ":clean", ":" + projectName + ":build"]
    }
}

tasks.register("allBuild", GradleBuild) {
    group = "_build"
    tasks = allSubprojects.collect { ":" + it + ":clean" } + modLoaderSubprojects.collect { ":" + it + ":build" }
}

allSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "Publish", GradleBuild) {
        group = "_publish"
        tasks = [":Common:clean", ":" + projectName + ":clean", ":" + projectName + ":publishMavenJavaPublicationToFuzsModResourcesRepository"]
    }
}

tasks.register("allPublish", GradleBuild) {
    group = "_publish"
    tasks = allSubprojects.collect { ":" + it + ":clean" } + allSubprojects.collect { ":" + it + ":publishMavenJavaPublicationToFuzsModResourcesRepository" }
}

allSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "GenSources", GradleBuild) {
        group = "_setup"
        tasks = [":" + projectName + ":genSourcesWithVineflower"]
    }
}

tasks.register("allGenSources", GradleBuild) {
    group = "_setup"
    tasks = allSubprojects.collect { ":" + it + ":genSourcesWithVineflower" }
}

modLoaderSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "UploadCurseForge", GradleBuild) {
        group = "_upload"
        tasks = [":Common:clean", ":" + projectName + ":clean", ":" + projectName + ":curseforge"]
    }
}

tasks.register("allUploadCurseForge", GradleBuild) {
    group = "_upload"
    tasks = allSubprojects.collect { ":" + it + ":clean" } + modLoaderSubprojects.collect { ":" + it + ":curseforge" }
}

modLoaderSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "UploadModrinth", GradleBuild) {
        group = "_upload"
        tasks = [":Common:clean", ":" + projectName + ":clean", ":" + projectName + ":modrinth"]
    }
}

tasks.register("allUploadModrinth", GradleBuild) {
    group = "_upload"
    tasks = allSubprojects.collect { ":" + it + ":clean" } + modLoaderSubprojects.collect { ":" + it + ":modrinth" }
}

modLoaderSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "UploadEverywhere", GradleBuild) {
        group = "_upload"
        tasks = [":Common:clean", ":" + projectName + ":clean", ":" + projectName + ":curseforge", ":" + projectName + ":modrinth"]
    }
}

tasks.register("allUploadEverywhere", GradleBuild) {
    group = "_upload"
    tasks = allSubprojects.collect { ":" + it + ":clean" } + modLoaderSubprojects.collect { ":" + it + ":curseforge" } + modLoaderSubprojects.collect { ":" + it + ":modrinth" }
}

modLoaderSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "Client", GradleBuild) {
        group = "_run"
        tasks = [":" + projectName + ":runClient"]
    }
}

modLoaderSubprojects.forEach { projectName ->
    tasks.register(projectName.substring(0, 1).toLowerCase() + projectName.substring(1).replaceAll("\\W", "") + "Server", GradleBuild) {
        group = "_run"
        tasks = [":" + projectName + ":runServer"]
    }
}

if (modLoaderSubprojects.any { it.toLowerCase().equals("neoforge") }) {
    tasks.register("neoforgeData", GradleBuild) {
        group = "_run"
        tasks = [":NeoForge:runData"]
    }
}

if (modLoaderSubprojects.any { it.toLowerCase().equals("forge") }) {
    tasks.register("forgeData", GradleBuild) {
        group = "_run"
        tasks = [":Forge:runData"]
    }
}
